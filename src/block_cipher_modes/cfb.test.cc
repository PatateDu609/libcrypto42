#include "block_cipher_mode.hh"
#include <gtest/gtest.h>
#include <map>
#include <string>

#define CREATE_CFB_TEST(alg, size) BlockCipherTestParams(CIPHER_MODE_CFB, alg, size)
#define CREATE_CFB1_TEST(alg, size) BlockCipherTestParams(CIPHER_MODE_CFB1, alg, size)
#define CREATE_CFB8_TEST(alg, size) BlockCipherTestParams(CIPHER_MODE_CFB8, alg, size)

class CFBTests : public BlockCipherModeTests {
protected:
	block_cipher_func *get_block_cipher_func_cipher() const final {
		return full_CFB_encrypt;
	}

	block_cipher_func *get_block_cipher_func_decipher() const final {
		return full_CFB_decrypt;
	}

public:
	~CFBTests() override = default;
};

class CFB1Tests : public BlockCipherModeTests {
protected:
	block_cipher_func *get_block_cipher_func_cipher() const final {
		return CFB1_encrypt;
	}

	block_cipher_func *get_block_cipher_func_decipher() const final {
		return CFB1_decrypt;
	}

public:
	~CFB1Tests() override = default;
};

class CFB8Tests : public BlockCipherModeTests {
protected:
	block_cipher_func *get_block_cipher_func_cipher() const final {
		return CFB8_encrypt;
	}

	block_cipher_func *get_block_cipher_func_decipher() const final {
		return CFB8_decrypt;
	}

public:
	~CFB8Tests() override = default;
};

// Tests about full CFB
static const std::vector<BlockCipherTestParams> cfb_aes128_params{
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 0),   CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 1),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 8),   CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 16),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 26),  CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 31),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 32),  CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 73),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 79),  CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 128),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES128, 512),
};

static const std::vector<BlockCipherTestParams> cfb_aes192_params{
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 0),   CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 1),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 8),   CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 16),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 26),  CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 31),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 32),  CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 73),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 79),  CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 128),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES192, 512),
};

static const std::vector<BlockCipherTestParams> cfb_aes256_params{
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 0),   CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 1),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 8),   CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 16),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 26),  CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 31),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 32),  CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 73),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 79),  CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 128),
	CREATE_CFB_TEST(BLOCK_CIPHER_AES256, 512),
};

static const std::vector<BlockCipherTestParams> cfb_des_params{
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 0),   CREATE_CFB_TEST(BLOCK_CIPHER_DES, 1),
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 8),   CREATE_CFB_TEST(BLOCK_CIPHER_DES, 16),
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 26),  CREATE_CFB_TEST(BLOCK_CIPHER_DES, 31),
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 32),  CREATE_CFB_TEST(BLOCK_CIPHER_DES, 73),
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 79),  CREATE_CFB_TEST(BLOCK_CIPHER_DES, 128),
	CREATE_CFB_TEST(BLOCK_CIPHER_DES, 512),
};


// TESTS about CFB1
static const std::vector<BlockCipherTestParams> cfb1_aes128_params{
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 0),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 1),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 8),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 16),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 26),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 31),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 32),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 73),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 79),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 128),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES128, 512),
};

static const std::vector<BlockCipherTestParams> cfb1_aes192_params{
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 0),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 1),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 8),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 16),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 26),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 31),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 32),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 73),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 79),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 128),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES192, 512),
};

static const std::vector<BlockCipherTestParams> cfb1_aes256_params{
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 0),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 1),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 8),   CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 16),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 26),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 31),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 32),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 73),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 79),  CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 128),
	CREATE_CFB1_TEST(BLOCK_CIPHER_AES256, 512),
};

static const std::vector<BlockCipherTestParams> cfb1_des_params{
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 0),   CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 1),
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 8),   CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 16),
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 26),  CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 31),
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 32),  CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 73),
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 79),  CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 128),
	CREATE_CFB1_TEST(BLOCK_CIPHER_DES, 512),
};


// TESTS about CFB8
static const std::vector<BlockCipherTestParams> cfb8_aes128_params{
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 0),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 1),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 8),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 16),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 26),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 31),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 32),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 73),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 79),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 128),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES128, 512),
};

static const std::vector<BlockCipherTestParams> cfb8_aes192_params{
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 0),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 1),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 8),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 16),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 26),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 31),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 32),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 73),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 79),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 128),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES192, 512),
};

static const std::vector<BlockCipherTestParams> cfb8_aes256_params{
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 0),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 1),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 8),   CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 16),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 26),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 31),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 32),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 73),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 79),  CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 128),
	CREATE_CFB8_TEST(BLOCK_CIPHER_AES256, 512),
};

static const std::vector<BlockCipherTestParams> cfb8_des_params{
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 0),   CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 1),
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 8),   CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 16),
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 26),  CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 31),
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 32),  CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 73),
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 79),  CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 128),
	CREATE_CFB8_TEST(BLOCK_CIPHER_DES, 512),
};

INSTANTIATE_TEST_SUITE_P(aes128, CFBTests, testing::ValuesIn(cfb_aes128_params));
INSTANTIATE_TEST_SUITE_P(aes192, CFBTests, testing::ValuesIn(cfb_aes192_params));
INSTANTIATE_TEST_SUITE_P(aes256, CFBTests, testing::ValuesIn(cfb_aes256_params));
INSTANTIATE_TEST_SUITE_P(des, CFBTests, testing::ValuesIn(cfb_des_params));

INSTANTIATE_TEST_SUITE_P(aes128, CFB1Tests, testing::ValuesIn(cfb1_aes128_params));
INSTANTIATE_TEST_SUITE_P(aes192, CFB1Tests, testing::ValuesIn(cfb1_aes192_params));
INSTANTIATE_TEST_SUITE_P(aes256, CFB1Tests, testing::ValuesIn(cfb1_aes256_params));
INSTANTIATE_TEST_SUITE_P(des, CFB1Tests, testing::ValuesIn(cfb1_des_params));

INSTANTIATE_TEST_SUITE_P(aes128, CFB8Tests, testing::ValuesIn(cfb8_aes128_params));
INSTANTIATE_TEST_SUITE_P(aes192, CFB8Tests, testing::ValuesIn(cfb8_aes192_params));
INSTANTIATE_TEST_SUITE_P(aes256, CFB8Tests, testing::ValuesIn(cfb8_aes256_params));
INSTANTIATE_TEST_SUITE_P(des, CFB8Tests, testing::ValuesIn(cfb8_des_params));

TEST_P(CFBTests, cipher) {
	run_cipher_test();
}

TEST_P(CFBTests, decipher) {
	run_decipher_test();
}

TEST_P(CFB1Tests, cipher) {
	run_cipher_test();
}

TEST_P(CFB1Tests, decipher) {
	run_decipher_test();
}

TEST_P(CFB8Tests, cipher) {
	run_cipher_test();
}

TEST_P(CFB8Tests, decipher) {
	run_decipher_test();
}