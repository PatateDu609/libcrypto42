#include "block_cipher_mode.hh"
#include <gtest/gtest.h>
#include <map>
#include <string>

#define CREATE_OFB_TEST(alg, size) BlockCipherTestParams(CIPHER_MODE_OFB, alg, size)

class OFBTests : public BlockCipherModeTests {
protected:
	block_cipher_func *get_block_cipher_func_cipher() const final {
		return OFB_encrypt;
	}

	block_cipher_func *get_block_cipher_func_decipher() const final {
		return OFB_decrypt;
	}

public:
	~OFBTests() override = default;
};

static const std::vector<BlockCipherTestParams> ofb_aes128_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES128, 512),
};

static const std::vector<BlockCipherTestParams> ofb_aes192_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES192, 512),
};

static const std::vector<BlockCipherTestParams> ofb_aes256_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_AES256, 512),
};

static const std::vector<BlockCipherTestParams> ofb_des_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_DES, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_DES, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_DES, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_DES, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_DES, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_DES, 512),
};

static const std::vector<BlockCipherTestParams> ofb_3des_ede3_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE3, 512),
};

static const std::vector<BlockCipherTestParams> ofb_3des_ede2_params{
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 0),   CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 1),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 8),   CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 16),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 26),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 31),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 32),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 73),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 79),  CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 128),
	CREATE_OFB_TEST(BLOCK_CIPHER_3DES_EDE2, 512),
};

INSTANTIATE_TEST_SUITE_P(aes128, OFBTests, testing::ValuesIn(ofb_aes128_params));
INSTANTIATE_TEST_SUITE_P(aes192, OFBTests, testing::ValuesIn(ofb_aes192_params));
INSTANTIATE_TEST_SUITE_P(aes256, OFBTests, testing::ValuesIn(ofb_aes256_params));
INSTANTIATE_TEST_SUITE_P(des, OFBTests, testing::ValuesIn(ofb_des_params));
INSTANTIATE_TEST_SUITE_P(tdes2, OFBTests, testing::ValuesIn(ofb_3des_ede2_params));
INSTANTIATE_TEST_SUITE_P(tdes3, OFBTests, testing::ValuesIn(ofb_3des_ede3_params));

TEST_P(OFBTests, cipher) {
	run_cipher_test();
}

TEST_P(OFBTests, decipher) {
	run_decipher_test();
}